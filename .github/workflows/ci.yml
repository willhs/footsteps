name: CI

on:
  push:
    branches: [ main, "**" ]
  pull_request:
    branches: [ "**" ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  frontend:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Resolve pnpm store path
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('footsteps-web/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ./footsteps-web
        run: pnpm install --frozen-lockfile

      - name: Lint
        working-directory: ./footsteps-web
        run: pnpm lint

      - name: Type check
        working-directory: ./footsteps-web
        run: npx tsc --noEmit

      - name: Test
        working-directory: ./footsteps-web
        env:
          CI: true
        run: pnpm test --ci --passWithNoTests

      - name: Build application
        working-directory: ./footsteps-web
        run: pnpm build

      - name: Archive build output
        working-directory: ./footsteps-web
        run: tar -czf nextjs-build.tar.gz .next

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: nextjs-build
          path: footsteps-web/nextjs-build.tar.gz

      # Docker build moved to deployment workflow to avoid artifact storage issues

  python:
    name: Python Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache Poetry virtualenv
        id: cache-poetry
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}

      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run tests
        run: poetry run pytest footstep-generator -q

  terraform:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform fmt (check)
        working-directory: ./iac
        run: terraform fmt -check -recursive

      - name: Terraform init (no backend)
        working-directory: ./iac
        run: terraform init -backend=false

      - name: Terraform validate
        working-directory: ./iac
        run: terraform validate

  gcs_tiles_probe:
    name: GCS Tiles Availability
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Probe public static PBF tiles on GCS
        run: |
          set -e
          BASE="https://storage.googleapis.com/footsteps-earth-tiles/tiles/humans"
          YEARS=("-1000" "0" "1000")
          COORDS=("0/0/0" "1/0/0" "1/1/0" "2/2/1" "2/0/0")

          echo "üîç Probing for any available static PBF tile..."
          for y in "${YEARS[@]}"; do
            for c in "${COORDS[@]}"; do
              URL="$BASE/$y/single/$c.pbf"
              CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "Accept-Encoding: identity" "$URL")
              if [ "$CODE" = "200" ]; then
                # check content-type hints
                HDRS=$(curl -sI -H "Accept-Encoding: identity" "$URL")
                CT=$(echo "$HDRS" | awk -F': ' 'tolower($1)=="content-type"{print tolower($2)}' | tr -d '\r')
                if echo "$CT" | grep -qi 'protobuf\|octet-stream'; then
                  echo "‚úÖ Found tile: $URL ($CT)"
                  exit 0
                fi
              fi
              echo "‚è≠Ô∏è  Miss $URL (HTTP $CODE)"
            done
          done
          echo "‚ùå No sample tiles found at expected GCS location"
          exit 1
