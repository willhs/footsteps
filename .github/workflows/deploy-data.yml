name: Deploy Data to GCS

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no actual upload)'
        required: false
        default: false
        type: boolean
      force_upload:
        description: 'Force re-upload of all files'
        required: false
        default: false
        type: boolean
      redeploy_app:
        description: 'Trigger app redeployment after data upload'
        required: false
        default: false
        type: boolean

concurrency:
  group: deploy-data-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel data uploads in progress

env:
  PROJECT_ID: footsteps-earth
  BUCKET_NAME: footsteps-earth-tiles
  
jobs:
  validate-data:
    name: Validate Local Data
    runs-on: ubuntu-latest
    
    outputs:
      file_count: ${{ steps.count.outputs.file_count }}
      total_size: ${{ steps.count.outputs.total_size }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check data directory
      id: count
      run: |
        DATA_DIR="./data/tiles/humans"
        if [ ! -d "$DATA_DIR" ]; then
          echo "❌ Error: Data directory $DATA_DIR not found"
          echo "💡 Run 'cd footstep-generator && python process_hyde.py && python make_tiles.py' first"
          exit 1
        fi
        
        FILE_COUNT=$(find "$DATA_DIR" -name "*.mbtiles" | wc -l)
        TOTAL_SIZE=$(du -sh "$DATA_DIR" | cut -f1)
        
        echo "📊 Found $FILE_COUNT MBTiles files"
        echo "📦 Total size: $TOTAL_SIZE"
        echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
        echo "total_size=$TOTAL_SIZE" >> $GITHUB_OUTPUT
        
        if [ "$FILE_COUNT" -eq 0 ]; then
          echo "❌ Error: No MBTiles files found in $DATA_DIR"
          exit 1
        fi

  deploy-data:
    name: Upload Data to GCS
    runs-on: ubuntu-latest
    needs: validate-data
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
        export_environment_variables: true
        
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Upload data to GCS
      working-directory: ./iac/scripts
      run: |
        echo "🚀 Starting data upload to gs://${{ env.BUCKET_NAME }}"
        echo "📊 Files to upload: ${{ needs.validate-data.outputs.file_count }}"
        echo "📦 Total size: ${{ needs.validate-data.outputs.total_size }}"
        
        # Set script permissions
        chmod +x ./upload-data.sh
        
        # Build upload command
        UPLOAD_CMD="./upload-data.sh"
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          UPLOAD_CMD="$UPLOAD_CMD --dry-run"
        fi
        
        if [ "${{ github.event.inputs.force_upload }}" = "true" ]; then
          UPLOAD_CMD="$UPLOAD_CMD --force"
        fi
        
        # Run upload
        $UPLOAD_CMD
        
    - name: Verify upload
      run: |
        echo "🔍 Verifying upload..."
        REMOTE_COUNT=$(gsutil ls "gs://${{ env.BUCKET_NAME }}/*.mbtiles" 2>/dev/null | wc -l || echo "0")
        LOCAL_COUNT="${{ needs.validate-data.outputs.file_count }}"
        
        echo "📊 Local files: $LOCAL_COUNT, Remote files: $REMOTE_COUNT"
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "✅ Dry run completed successfully"
        elif [ "$LOCAL_COUNT" -eq "$REMOTE_COUNT" ] && [ "$REMOTE_COUNT" -gt 0 ]; then
          echo "✅ Upload verification passed!"
        else
          echo "❌ Upload verification failed - file count mismatch"
          exit 1
        fi
        
    - name: Trigger app redeployment
      if: ${{ github.event.inputs.redeploy_app == 'true' && github.event.inputs.dry_run != 'true' }}
      run: |
        echo "🚀 Triggering app redeployment..."
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy.yml/dispatches \
          -d '{"ref":"main"}'
        echo "✅ App redeployment triggered"
        
    - name: Summary
      if: always()
      run: |
        echo "## 📦 Data Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Bucket**: gs://${{ env.BUCKET_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Files processed**: ${{ needs.validate-data.outputs.file_count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Total size**: ${{ needs.validate-data.outputs.total_size }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Dry run**: ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Force upload**: ${{ github.event.inputs.force_upload }}" >> $GITHUB_STEP_SUMMARY
        echo "- **App redeployment**: ${{ github.event.inputs.redeploy_app }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
          echo "- **Status**: 🧪 Dry run completed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: ✅ Upload completed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **View bucket**: https://console.cloud.google.com/storage/browser/${{ env.BUCKET_NAME }}" >> $GITHUB_STEP_SUMMARY