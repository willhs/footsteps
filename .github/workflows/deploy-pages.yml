name: Deploy Static Site (Cloudflare Pages)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "**" ]

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_and_deploy:
    name: Build and Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      # Build-time env for static export
      NEXT_PUBLIC_PMTILES_DIRECT: "true"
      # Point the app directly at the tiles CDN/Worker; override per env
      NEXT_PUBLIC_CDN_HOST: ${{ secrets.NEXT_PUBLIC_CDN_HOST || 'https://pmtiles.willhs.me' }}
      # Optional fetch knobs (see lib/pmtilesTileLayer.ts)
      NEXT_PUBLIC_PM_ADD_RK: "true"
      NEXT_PUBLIC_PM_FETCH_CACHE: "default"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Install deps
        working-directory: ./footsteps-web
        run: pnpm install --frozen-lockfile

      - name: Build (static export)
        working-directory: ./footsteps-web
        run: pnpm build

      - name: Ensure Pages project exists
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          CF_PROJECT: ${{ vars.CLOUDFLARE_PAGES_PROJECT }}
        run: |
          set -euo pipefail
          API="https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/pages/projects/${CF_PROJECT}"
          OK=$(curl -s -H "Authorization: Bearer ${CF_API_TOKEN}" "$API" | jq -r '.success // false') || OK=false
          if [ "$OK" = "true" ]; then
            echo "Pages project exists: ${CF_PROJECT}"
            exit 0
          fi
          echo "Creating Pages project: ${CF_PROJECT}"
          npx -y wrangler@3 pages project create "$CF_PROJECT" --production-branch main

      - name: Publish to Cloudflare Pages (wrangler deploy)
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          # Use branch name to create preview; 'main' hits production
          command: >-
            pages deploy footsteps-web/out
            --project-name ${{ vars.CLOUDFLARE_PAGES_PROJECT }}
            --branch ${{ github.ref_name }}

      - name: Deployment summary
        if: always()
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          CF_PROJECT: ${{ vars.CLOUDFLARE_PAGES_PROJECT }}
        run: |
          API_URL="https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/pages/projects/${CF_PROJECT}/deployments"
          URL=$(curl -s -H "Authorization: Bearer ${CF_API_TOKEN}" "$API_URL" | jq -r '.result[0].url // empty')
          ENV=$(curl -s -H "Authorization: Bearer ${CF_API_TOKEN}" "$API_URL" | jq -r '.result[0].environment // empty')
          echo "## 🌐 Pages" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "$URL" ]; then echo "URL: $URL" >> $GITHUB_STEP_SUMMARY; fi
          if [ -n "$ENV" ]; then echo "Environment: $ENV" >> $GITHUB_STEP_SUMMARY; fi

      - name: Attach custom domain (prod only)
        if: github.ref_name == 'main'
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          CF_PROJECT: ${{ vars.CLOUDFLARE_PAGES_PROJECT }}
          CF_DOMAIN: footsteps.willhs.me
        run: |
          set -euo pipefail
          BASE="https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/pages/projects/${CF_PROJECT}/domains"
          # Check existing domains
          LIST=$(curl -s -H "Authorization: Bearer ${CF_API_TOKEN}" "$BASE")
          EXISTS=$(printf '%s' "$LIST" | jq -r --arg D "$CF_DOMAIN" '.result | map(select(.name==$D)) | length')
          if [ "${EXISTS:-0}" != "0" ]; then
            exit 0
          fi
          # Attach domain
          PAYLOAD=$(jq -n --arg name "$CF_DOMAIN" '{name: $name}')
          curl -s -X POST "$BASE" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H 'Content-Type: application/json' \
            --data "$PAYLOAD" >/dev/null || true

      - name: Ensure DNS CNAME (prod only)
        if: github.ref_name == 'main'
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ZONE_NAME: willhs.me
          CF_RECORD_NAME: footsteps.willhs.me
          CF_RECORD_TARGET: footsteps.pages.dev
        run: |
          set -euo pipefail
          ZONE_ID=$(curl -s -H "Authorization: Bearer ${CF_API_TOKEN}" "https://api.cloudflare.com/client/v4/zones?name=${CF_ZONE_NAME}" | jq -r '.result[0].id // empty')
          [ -n "$ZONE_ID" ] || { echo "zone not found" >&2; exit 1; }
          REC_LIST=$(curl -s -H "Authorization: Bearer ${CF_API_TOKEN}" "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records?name=${CF_RECORD_NAME}&per_page=100")
          OK=$(printf '%s' "$REC_LIST" | jq -r --arg T "$CF_RECORD_TARGET" '.result | map(select(.type=="CNAME" and .content==$T and .proxied==true)) | length')
          if [ "$OK" != "0" ]; then exit 0; fi
          for id in $(printf '%s' "$REC_LIST" | jq -r '.result[].id // empty'); do
            curl -s -X DELETE "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records/${id}" -H "Authorization: Bearer ${CF_API_TOKEN}" >/dev/null || true
          done
          WANT=$(jq -n --arg type CNAME --arg name "$CF_RECORD_NAME" --arg content "$CF_RECORD_TARGET" '{type:$type,name:$name,content:$content,ttl:1,proxied:true}')
          curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H 'Content-Type: application/json' \
            --data "$WANT" >/dev/null || true

      - name: Ensure DNS CNAME to Pages (prod only)
        if: github.ref_name == 'main'
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_ZONE_NAME: willhs.me
          CF_RECORD_NAME: footsteps.willhs.me
          CF_RECORD_TARGET: footsteps.pages.dev
        run: |
          set -euo pipefail
          ZONES=$(curl -s -H "Authorization: Bearer ${CF_API_TOKEN}" "https://api.cloudflare.com/client/v4/zones?name=${CF_ZONE_NAME}")
          ZONE_ID=$(printf '%s' "$ZONES" | jq -r '.result[0].id // empty')
          if [ -z "$ZONE_ID" ]; then
            echo "Could not resolve zone id for ${CF_ZONE_NAME}" >&2
            exit 1
          fi
          echo "Zone: ${CF_ZONE_NAME} -> ${ZONE_ID}"
          REC_LIST=$(curl -s -H "Authorization: Bearer ${CF_API_TOKEN}" "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records?name=${CF_RECORD_NAME}&per_page=100")
          OK_COUNT=$(printf '%s' "$REC_LIST" | jq -r --arg T "$CF_RECORD_TARGET" '.result | map(select(.type=="CNAME" and .content==$T and .proxied==true)) | length')
          if [ "$OK_COUNT" != "0" ]; then
            echo "DNS CNAME already correct."
            exit 0
          fi
          # Delete any existing records (A/AAAA/CNAME/etc) for this name
          IDS=$(printf '%s' "$REC_LIST" | jq -r '.result[].id // empty')
          for id in $IDS; do
            echo "Deleting old record ${id}"
            curl -s -X DELETE "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records/${id}" \
              -H "Authorization: Bearer ${CF_API_TOKEN}" | jq . || true
          done
          # Create desired proxied CNAME
          WANT=$(jq -n --arg type CNAME --arg name "$CF_RECORD_NAME" --arg content "$CF_RECORD_TARGET" '{type:$type,name:$name,content:$content,ttl:1,proxied:true}')
          echo "Creating CNAME ${CF_RECORD_NAME} -> ${CF_RECORD_TARGET} (proxied)"
          curl -s -X POST "https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/dns_records" \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            -H 'Content-Type: application/json' \
            --data "$WANT" | jq . || true

      - name: Summary
        run: |
          echo "## 📦 Static Export" >> $GITHUB_STEP_SUMMARY
          echo "- NEXT_PUBLIC_CDN_HOST: $NEXT_PUBLIC_CDN_HOST" >> $GITHUB_STEP_SUMMARY
          echo "- Output: footsteps-web/out (Next.js export)" >> $GITHUB_STEP_SUMMARY
