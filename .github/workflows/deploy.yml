name: Deploy to Cloud Run

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: footsteps-earth
  REGION: us-central1
  SERVICE_NAME: footsteps-time-app

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: >-
      ${{ github.event.workflow_run.conclusion == 'success' &&
          github.event.workflow_run.head_branch == 'main' }}
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code at CI-passed commit
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('humans-globe/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      working-directory: ./humans-globe
      run: pnpm install --frozen-lockfile
      
    - name: Build application
      working-directory: ./humans-globe
      run: pnpm build
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
        # Ensure ADC is exported for gcloud + Cloud Build
        export_environment_variables: true
        
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.5

    - name: Apply Terraform
      working-directory: ./iac
      run: |
        terraform init
        terraform apply -auto-approve
        
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
      
    - name: Build and push Docker image
      working-directory: ./humans-globe
      run: |
        # Create a unique tag using git commit SHA
        IMAGE_TAG="gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.event.workflow_run.head_sha }}"
        
        # Build and push using Cloud Build for better caching
        # Use --async and poll status to avoid log streaming permission issues
        BUILD_ID=$(gcloud builds submit \
          --tag "$IMAGE_TAG" \
          --timeout=10m \
          --format='value(id)' \
          --async \
          .)

        echo "⏳ Submitted Cloud Build: $BUILD_ID"
        echo "🔎 Waiting for build to complete..."
        for i in {1..90}; do
          STATUS=$(gcloud builds describe "$BUILD_ID" --format='value(status)')
          echo "Attempt $i: status=$STATUS"
          if [ "$STATUS" = "SUCCESS" ]; then
            echo "✅ Build succeeded"
            break
          fi
          if [ "$STATUS" = "FAILURE" ] || [ "$STATUS" = "CANCELLED" ] || [ "$STATUS" = "TIMEOUT" ]; then
            echo "❌ Build failed with status: $STATUS"
            exit 1
          fi
          sleep 10
        done
        if [ "$STATUS" != "SUCCESS" ]; then
          echo "❌ Build did not complete within expected time"
          exit 1
        fi
          
        # Also tag as latest for consistency
        gcloud container images add-tag --quiet \
          "$IMAGE_TAG" \
          "gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest"

    # Cache warmer image build removed (deprecated)
          
    - name: Deploy to Cloud Run
      run: |
        # Deploy with zero-downtime deployment and a warmed resident instance
        ENV_VARS="NODE_ENV=production,GCP_PROJECT_ID=${{ env.PROJECT_ID }},GCS_BUCKET_NAME=footsteps-earth-tiles,HUMANS_TILES_DIR=/data/tiles/humans,TILE_CACHE_DIR=/data/tiles/humans"
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.event.workflow_run.head_sha }} \
          --region=${{ env.REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --memory=2Gi \
          --cpu=2 \
          --min-instances=0 \
          --max-instances=100 \
          --timeout=300 \
          --set-env-vars="$ENV_VARS"
          
    - name: Get service URL
      id: deploy
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "✅ Service deployed at: $SERVICE_URL"
        
    - name: Health check
      run: |
        # Wait for the service to be ready and perform health check
        echo "🔍 Performing health check..."
        for i in {1..30}; do
          if curl -f -s "${{ steps.deploy.outputs.SERVICE_URL }}" > /dev/null; then
            echo "✅ Health check passed!"
            break
          fi
          echo "⏳ Attempt $i failed, waiting 10s..."
          sleep 10
        done
        
        # Final verification
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.SERVICE_URL }}")
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "🎉 Deployment successful! Service is healthy."
        else
          echo "❌ Health check failed with HTTP $HTTP_STATUS"
          exit 1
        fi
        
    # Tiles API test removed - app now fetches tiles directly from GCS
    # Cache warming API call removed (deprecated)
        
    - name: Deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Image**: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ steps.deploy.outputs.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Healthy" >> $GITHUB_STEP_SUMMARY
