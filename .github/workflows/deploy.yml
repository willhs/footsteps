name: Deploy to Cloud Run

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: footsteps-earth
  REGION: us-central1
  SERVICE_NAME: footsteps-time-app

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: >-
      ${{ github.event.workflow_run.conclusion == 'success' &&
          github.event.workflow_run.head_branch == 'main' }}
    
    permissions:
      contents: read
      id-token: write
      actions: read
    
    steps:
    - name: Checkout code at CI-passed commit
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.head_sha }}

    - name: Build Docker image directly
      working-directory: ./footsteps-web
      run: docker build -t footsteps-web:${{ github.event.workflow_run.head_sha }} .
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
        # Ensure ADC is exported for gcloud + Cloud Build
        export_environment_variables: true
        
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.5

    - name: Cache Terraform
      uses: actions/cache@v3
      with:
        path: |
          ~/.terraform.d/plugin-cache
          iac/.terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('iac/**/*.tf') }}

    - name: Apply Terraform
      working-directory: ./iac
      env:
        TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
      run: |
        terraform init
        terraform apply -auto-approve
        
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
      
    - name: Push Docker image to GCR
      run: |
        IMAGE_TAG="gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.event.workflow_run.head_sha }}"
        docker tag footsteps-web:${{ github.event.workflow_run.head_sha }} "$IMAGE_TAG"
        docker push "$IMAGE_TAG"
        gcloud container images add-tag --quiet \
          "$IMAGE_TAG" \
          "gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest"

    # Cache warmer image build removed (deprecated)
          
    - name: Deploy to Cloud Run
      run: |
        # Deploy with zero-downtime deployment and a warmed resident instance
        ENV_VARS="NODE_ENV=production,GCP_PROJECT_ID=${{ env.PROJECT_ID }},GCS_TILES_BUCKET=footsteps-earth-tiles,HUMANS_TILES_DIR=/data/tiles/humans,TILE_CACHE_DIR=/data/tiles/humans,SQLJS_WORKER_URL=file:///app/sqljs/sqlite.worker.js,SQLJS_WASM_URL=file:///app/sqljs/sql-wasm.wasm,SQLJS_REQUEST_CHUNK_SIZE=262144,SQLJS_HTTPVFS_TIMEOUT_MS=45000"
        IMAGE_TAG="gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.event.workflow_run.head_sha }}"
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image="$IMAGE_TAG" \
          --region=${{ env.REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --memory=2Gi \
          --cpu=2 \
          --min-instances=0 \
          --max-instances=100 \
          --timeout=300 \
          --set-env-vars="$ENV_VARS"
          
    - name: Get service URL
      id: deploy
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "✅ Service deployed at: $SERVICE_URL"
        
    - name: Health check
      run: |
        # Wait for the service to be ready and perform health check
        echo "🔍 Performing health check..."
        for i in {1..30}; do
          if curl -f -s "${{ steps.deploy.outputs.SERVICE_URL }}" > /dev/null; then
            echo "✅ Health check passed!"
            break
          fi
          echo "⏳ Attempt $i failed, waiting 10s..."
          sleep 10
        done
        
        # Final verification
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.SERVICE_URL }}")
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "🎉 Deployment successful! Service is healthy."
        else
          echo "❌ Health check failed with HTTP $HTTP_STATUS"
          exit 1
        fi
        
    # Tiles API test removed - app now fetches tiles directly from GCS
    # Cache warming API call removed (deprecated)
        
    - name: Deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Image**: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ steps.deploy.outputs.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Healthy" >> $GITHUB_STEP_SUMMARY
