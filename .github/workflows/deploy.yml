name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_ID: footsteps-earth
  REGION: us-central1
  SERVICE_NAME: footsteps-time-app
  
jobs:
  test-frontend:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('humans-globe/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ./humans-globe
        run: pnpm install --frozen-lockfile

      - name: Type check
        working-directory: ./humans-globe
        run: npx tsc --noEmit

      - name: Lint
        working-directory: ./humans-globe
        run: pnpm lint

      - name: Test
        working-directory: ./humans-globe
        env:
          CI: true
        run: pnpm test -- --ci --passWithNoTests

  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache Poetry virtualenv
        id: cache-poetry
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'poetry.lock') }}

      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run tests
        run: poetry run pytest footstep-generator -q

  validate-terraform:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform fmt (check)
        working-directory: ./iac
        run: terraform fmt -check -recursive

      - name: Terraform init (no backend)
        working-directory: ./iac
        run: terraform init -backend=false

      - name: Terraform validate
        working-directory: ./iac
        run: terraform validate

  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-frontend, test-python, validate-terraform]
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10
        
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('humans-globe/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      working-directory: ./humans-globe
      run: pnpm install --frozen-lockfile
      
    - name: Build application
      working-directory: ./humans-globe
      run: pnpm build
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
        
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
      
    - name: Build and push Docker image
      working-directory: ./humans-globe
      run: |
        # Create a unique tag using git commit SHA
        IMAGE_TAG="gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
        
        # Build and push using Cloud Build for better caching
        gcloud builds submit \
          --tag $IMAGE_TAG \
          --timeout=10m \
          .
          
        # Also tag as latest for consistency
        gcloud container images add-tag \
          $IMAGE_TAG \
          gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
          
    - name: Deploy to Cloud Run
      run: |
        # Deploy with zero-downtime deployment
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --region=${{ env.REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --memory=2Gi \
          --cpu=2 \
          --min-instances=0 \
          --max-instances=100 \
          --timeout=300 \
          --set-env-vars="NODE_ENV=production,GCP_PROJECT_ID=${{ env.PROJECT_ID }},GCS_BUCKET_NAME=footsteps-earth-tiles,HUMANS_TILES_DIR=/app/data/tiles/humans"
          
    - name: Get service URL
      id: deploy
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "✅ Service deployed at: $SERVICE_URL"
        
    - name: Health check
      run: |
        # Wait for the service to be ready and perform health check
        echo "🔍 Performing health check..."
        for i in {1..30}; do
          if curl -f -s "${{ steps.deploy.outputs.SERVICE_URL }}" > /dev/null; then
            echo "✅ Health check passed!"
            break
          fi
          echo "⏳ Attempt $i failed, waiting 10s..."
          sleep 10
        done
        
        # Final verification
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.SERVICE_URL }}")
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "🎉 Deployment successful! Service is healthy."
        else
          echo "❌ Health check failed with HTTP $HTTP_STATUS"
          exit 1
        fi
        
    - name: Test tiles API
      run: |
        # Test that the tiles API is working
        echo "🧪 Testing tiles API..."
        TILES_URL="${{ steps.deploy.outputs.SERVICE_URL }}/api/tiles/-1000/0/1/0/0.pbf"
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$TILES_URL")
        
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "✅ Tiles API test passed!"
        else
          echo "❌ Tiles API test failed with HTTP $HTTP_STATUS"
          exit 1
        fi
        
    - name: Deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Image**: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ steps.deploy.outputs.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Healthy" >> $GITHUB_STEP_SUMMARY
